#version 430 core

layout (points) in;

layout (triangle_strip, max_vertices = 5) out;

out vec3 outColor;


uniform vec3 Right;

    // Parent Pos
uniform vec3 Left;

    // Right Particle
uniform vec3 botRight;

    // Bottom Particle
uniform vec3 botLeft;


in VS_GS_VERTEX{
    in vec4 position;
    in vec3 color;
    in mat4 PVM;
} gs_in[];

void main()
{
    outColor = gs_in[0].color;
   // gl_Position = gs_in[0].position + gs_in[0].PVM * vec4(botLeft.x - Left.x, botLeft.y - Left.y, botLeft.z - Left.z, 0.0f) * 1.2; EmitVertex();    // Top Left

   // gl_Position = gs_in[0].position + gs_in[0].PVM * vec4(0.0f, 0.0f, 0.0f, 0.0f)* 1.2; EmitVertex();    // Bottom Left

   // gl_Position = gs_in[0].position + gs_in[0].PVM * vec4(botRight.x - Left.x, botRight.y - Left.y, botRight.z - Left.z, 0.0f)* 1.2; EmitVertex();    // Bottom Right

    //gl_Position = gs_in[0].position + gs_in[0].PVM * vec4(Right.x - Left.x, Right.y - Left.y, Right.z - Left.z, 0.0f)* 1.2; EmitVertex();    // Top Right

   // gl_Position = gs_in[0].position + gs_in[0].PVM * vec4(botLeft.x - Left.x, botLeft.y - Left.y, botLeft.z - Left.z, 0.0f)* 1.2 ; EmitVertex();    // Top Left
     
    //move start position from top left to bottom right

    gl_Position = gs_in[0].position + gs_in[0].PVM * vec4(botLeft.x - Left.x, botLeft.y - Left.y, botLeft.z - Left.z, 0.0f) ; EmitVertex();    // Top Left

    gl_Position = gs_in[0].position + gs_in[0].PVM * vec4(0.0f, 0.0f, 0.0f, 0.0f); EmitVertex();    // Bottom Left

    gl_Position = gs_in[0].position + gs_in[0].PVM * vec4(botRight.x - Left.x, botRight.y - Left.y, botRight.z - Left.z, 0.0f); EmitVertex();    // Bottom Right

    gl_Position = gs_in[0].position + gs_in[0].PVM * vec4(Right.x - Left.x, Right.y - Left.y, Right.z - Left.z, 0.0f); EmitVertex();    // Top Right

    gl_Position = gs_in[0].position + gs_in[0].PVM * vec4(botLeft.x - Left.x, botLeft.y - Left.y, botLeft.z - Left.z, 0.0f) ; EmitVertex();    // Top Left

  

   

    EndPrimitive();
}